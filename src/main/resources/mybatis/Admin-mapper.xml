<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="Admin">
  
  	<!-- DashBoard -->
  
  	<select id="getWeekSales" resultType="Trillion.Palet.DTO.SalesDTO">
		select sum(totalprice)as salessum , payday as salesdate from (
		select totalprice, to_char(buydate, 'YY/MM/DD')as payday from mygoods 
		UNION ALL
		select et_cost as totalprice, to_char(et_buydate, 'YY/MM/DD') as payday from exticket
		UNION ALL
		select pro_cost as totalprice, to_char(pro_buydate, 'YY/MM/DD') as payday from proticket
		) where payday >= to_char(sysdate-6, 'YY/MM/DD') group by payday order by payday desc
  	</select>
  	
  	<select id="getWeekCount" resultType="Trillion.Palet.DTO.SalesDTO">
  		select sum(salescount)as salescount , payday as salesdate from (
		select sales_count as salescount, to_char(buydate, 'YY/MM/DD')as payday from mygoods 
		UNION ALL
		select et_count as salescount, to_char(et_buydate, 'YY/MM/DD') as payday from exticket
		UNION ALL
		select pro_count as salescount, to_char(pro_buydate, 'YY/MM/DD') as payday from proticket
		) where payday >= to_char(sysdate-6, 'YY/MM/DD') group by payday order by payday desc
  	</select>
  	
  	<select id="getWeekCountGoods" resultType="Trillion.Palet.DTO.SalesDTO">
  		select sum(salescount)as salescount , payday as salesdate from ( select sales_count as salescount, to_char(buydate, 'YY/MM/DD')as payday from mygoods)
  		 where payday >= to_char(sysdate-6, 'YY/MM/DD')group by payday order by payday desc
  	</select>
  	
  	<select id="getWeekCountExhibition" resultType="Trillion.Palet.DTO.SalesDTO">
  		select sum(salescount)as salescount , payday as salesdate from ( select et_count as salescount, to_char(et_buydate, 'YY/MM/DD')as payday from exticket)
  		 where payday >= to_char(sysdate-6, 'YY/MM/DD') group by payday order by payday desc
  	</select>
  	
  	<select id="getWeekCountProgram" resultType="Trillion.Palet.DTO.SalesDTO">
  		select sum(salescount)as salescount , payday as salesdate from ( select pro_count as salescount, to_char(pro_buydate, 'YY/MM/DD')as payday from proticket)
  		 where payday >= to_char(sysdate-6, 'YY/MM/DD') group by payday order by payday desc
  	</select>
  	
  	<!-- Member -->
  	
  	<update id="adminMemberModi">
		update member set name = #{name}, grade= #{grade}, point = #{point} where email = #{email}  	
  	</update>
  	
  	<delete id="adminMemberBan">
  		delete from member where email = #{value}
  	</delete>
  	
  	<update id="adminMemberUpdate">
  		update member set grade = #{grade} where email = #{email}
  	</update>
  	
  	<select id="getMemberPayment" resultType='Trillion.Palet.DTO.AdminDTO'>
  		select * from (
		select merchant_uid, g_name as title, totalprice as price, buydate as pay_time, category from mygoods where email = #{value}
		UNION ALL
		select et_booknumber as merchant_uid, et_title as title, et_cost as price, et_buydate as pay_time, et_category as category from exticket where et_email = #{value}
		UNION ALL
		select pro_booknumber as merchant_uid, pro_title as title, pro_cost as price, pro_buydate as pay_time, pro_category as category from proticket where pro_email = #{value}) where pay_time > sysdate-13 order by pay_time desc
  	</select>
  	
  	<select id='getMemberAddress' resultType='Trillion.Palet.DTO.DeliveryDTO'>
  		select * from deliveryaddress where defaultaddress = 'Y' and email = #{value}
  	</select>
  	
  	<!-- Exhibition -->
  	
  	<update id="adminExhibitionUpdate">
  		update preexhibition set pe_name = #{pe_name}, pe_date = #{pe_date}, pe_price = #{pe_price} 
  		where pe_seq = #{pe_seq}
  	</update>
  	
  	<insert id="newExhibitionInsert">
  		insert into preexhibition values(preexhibition_seq.nextval, null, #{pe_name}, #{pe_contents}, 'Palet', #{pe_date}, #{pe_price},#{pe_writer}, #{pe_artcount},#{pe_period},0)
  		<selectKey order="AFTER" keyProperty="pe_seq" resultType="int">
			select preexhibition_seq.currval from dual
		</selectKey>
  	</insert>
  	
  	<delete id="exhibitionCheckDelete">
  		delete from preexhibition where pe_seq = #{value}
  	</delete>
  	
  	<update id="exhibitionCheckUpdate">
  		update preexhibition set pe_period = #{pe_period} where pe_seq = #{pe_seq}
  	</update>
  	
  	<select id="getExhibition" resultType="Trillion.Palet.DTO.NewExhibitionDTO">
  		select * from preexhibition  where pe_seq = #{value}
  	</select>
  	
  	<select id="exhibitionSelectTop50" resultType="Trillion.Palet.DTO.NewExhibitionDTO">
  		select * from (select row_number() over(order by pe_seq desc) line, preexhibition.* from preexhibition ) preexhibition where line between 1 and 50
  	</select>
  	
  	<select id="exhibitionSelectFixed" resultType="Trillion.Palet.DTO.NewExhibitionDTO">
  		select * from preexhibition 
		where pe_seq in (1070,1071,1077,1079,1080,1085,1087,1091,1092,1100,1101,1102,1103,1104,1105,1106)
  	</select>
  	
  	<!-- Goods -->
  	
  	<update id="adminGoodsUpdate">
  		update goods set g_name = #{g_name}, g_stock = #{g_stock}, g_price = #{g_price} where g_num = #{g_num}
  	</update>
  	
  	<select id="getGoods" resultType="Trillion.Palet.DTO.GoodsDTO">
  		select e_num, g_seq, g_name, g_price, g_option, g.sales_count, g_stock, pe_name from goods g join preexhibition e on(g.e_num = e.pe_seq) where g_seq = #{value}
  	</select>
  	
  	<insert id="goodsInsertInto">
  		insert into goods values(g_seq.nextval, goods_seq.nextval, #{e_num}, #{g_name}, #{g_price}, '선물포장 (포장_블랙 로고)' , #{g_contents}, default, #{g_stock})
  		<selectKey order="AFTER" keyProperty="g_num" resultType="int">
			select goods_seq.currval from dual
		</selectKey>
  	</insert>
  	
  	<insert id="goodsInsertIntoOption1">
  		insert into goods values(g_seq.nextval, #{g_num}, #{e_num}, #{g_name}, #{g_price}, '선물포장 (포장_그레이 로고)' , #{g_contents}, default, #{g_stock})
  	</insert>
  	
  	<insert id="goodsInsertIntoOption2">
  		insert into goods values(g_seq.nextval, #{g_num}, #{e_num}, #{g_name}, #{g_price}, '선물포장 (포장_화이트 로고)' , #{g_contents}, default, #{g_stock})
  	</insert>
  	
  	<!-- Payment -->
  	
  	<select id="paymentSelectByPage" resultType="Trillion.Palet.DTO.TotalPaymentDTO">
  		with total1 as (
		select merchant_uid, name, email, phone, totalprice, buydate as pay_time, state, category from mygoods
		UNION ALL
		select et_booknumber as merchant_uid, et_username as name, et_email as email, et_phone as phone, 
		et_cost as totalprice, et_buydate as pay_time, et_state as state, et_category as category from exticket
		UNION ALL
        select pro_booknumber as merchant_uid, pro_username as name, pro_email as email, pro_phone as phone,
        pro_cost as totalprice, pro_buydate as pay_time, pro_state as state, pro_category as category from proticket),
		total2 as(
		select row_number() over(order by pay_time desc) line, merchant_uid, name, email, phone, totalprice, pay_time, state, category
		from total1)
		select merchant_uid, name, email, phone, totalprice, pay_time, state, category from total2 where line between #{start} and #{end}
  	</select>
  	
  	<select id="getPaymentTotalCount" resultType="int">
  		select count(*)
		from (select merchant_uid, name, email, phone, totalprice, buydate as pay_time, state, category from mygoods
		UNION ALL
		select et_booknumber as merchant_uid, et_username as name, et_email as email, et_phone as phone, 
		et_cost as totalprice, et_buydate as pay_time, et_state as state, et_category as category from exticket
		UNION ALL
        select pro_booknumber as merchant_uid, pro_username as name, pro_email as email, pro_phone as phone,
        pro_cost as totalprice, pro_buydate as pay_time, pro_state as state, pro_category as category from proticket)
  	</select>
  	  	
  	<select id="paymentSelectUIDByPage" resultType="Trillion.Palet.DTO.TotalPaymentDTO">
  		with total1 as (
		select merchant_uid, name, email, phone, totalprice, buydate as pay_time, state, category from mygoods where merchant_uid like '%'||#{uid}||'%'
		UNION ALL
		select et_booknumber as merchant_uid, et_username as name, et_email as email, et_phone as phone, 
		et_cost as totalprice, et_buydate as pay_time, et_state as state, et_category as category from exticket where et_booknumber like '%'||#{uid}||'%'
		UNION ALL
        select pro_booknumber as merchant_uid, pro_username as name, pro_email as email, pro_phone as phone,
        pro_cost as totalprice, pro_buydate as pay_time, pro_state as state, pro_category as category from proticket where pro_booknumber like '%'||#{uid}||'%'),
		total2 as(
		select row_number() over(order by pay_time desc) line, merchant_uid, name, email, phone, totalprice, pay_time, state, category
		from total1)
		select merchant_uid, name, email, phone, totalprice, pay_time, state, category from total2 where line between #{start} and #{end}
  	</select>
  	
  	<select id="getPaymentUIDTotalCount" resultType="int">
  		select count(*)
		from (select merchant_uid, name, email, phone, totalprice, buydate as pay_time, state, category from mygoods
		UNION ALL
		select et_booknumber as merchant_uid, et_username as name, et_email as email, et_phone as phone, 
		et_cost as totalprice, et_buydate as pay_time, et_state as state, et_category as category from exticket
		UNION ALL
        select pro_booknumber as merchant_uid, pro_username as name, pro_email as email, pro_phone as phone,
        pro_cost as totalprice, pro_buydate as pay_time, pro_state as state, pro_category as category from proticket) where merchant_uid like '%'||#{search}||'%'
  	</select>
  	
  	<select id="paymentSelectNameByPage" resultType="Trillion.Palet.DTO.TotalPaymentDTO">
  		with total1 as (
		select merchant_uid, name, email, phone, totalprice, buydate as pay_time, state, category from mygoods where name like '%'||#{name}||'%'
		UNION ALL
		select et_booknumber as merchant_uid, et_username as name, et_email as email, et_phone as phone, 
		et_cost as totalprice, et_buydate as pay_time, et_state as state, et_category as category from exticket where et_username like '%'||#{name}||'%'
		UNION ALL
        select pro_booknumber as merchant_uid, pro_username as name, pro_email as email, pro_phone as phone,
        pro_cost as totalprice, pro_buydate as pay_time, pro_state as state, pro_category as category from proticket where pro_username like '%'||#{name}||'%'),
		total2 as(
		select row_number() over(order by pay_time desc) line, merchant_uid, name, email, phone, totalprice, pay_time, state, category
		from total1)
		select merchant_uid, name, email, phone, totalprice, pay_time, state, category from total2 where line between #{start} and #{end}
  	</select>
  	
  	<select id="getPaymentNameTotalCount" resultType="int">
  		select count(*)
		from (select merchant_uid, name, email, phone, totalprice, buydate as pay_time, state, category from mygoods
		UNION ALL
		select et_booknumber as merchant_uid, et_username as name, et_email as email, et_phone as phone, 
		et_cost as totalprice, et_buydate as pay_time, et_state as state, et_category as category from exticket
		UNION ALL
        select pro_booknumber as merchant_uid, pro_username as name, pro_email as email, pro_phone as phone,
        pro_cost as totalprice, pro_buydate as buydate, pro_state as state, pro_category as category from proticket) where name like '%'||#{search}||'%'
  	</select>
  	
  	<select id="getAdminPayDetail" resultType="Trillion.Palet.DTO.AdminDTO">
<!--   		select merchant_uid, name, email, phone, address1, address2, zipcode, g_name as title, -->
<!--   		 card_name, card_number, card_quota, state, category, totalprice as price, buydate as pay_time,  -->
<!--   		  sales_count as count, addpoint as point, usedpoint, cp_discount as cpdiscount, serial as cpserial from mygoods  -->
<!--   		 where merchant_uid = #{value} -->
		select * from (
		select g.merchant_uid, g.name, g.email, g.phone, g.address1, g.address2, g.zipcode, p.g_name as title,
  		g.card_name, g.card_number, g.card_quota, g.state, g.category, p.totalprice as price, g.buydate as pay_time, 
  		(select sum(sales_count) from mygoods where merchant_uid = #{value} )as count, g.addpoint as point, g.usedpoint, g.cp_discount as cpdiscount, g.serial as cpserial from mygoods g full join payment p on(g.merchant_uid = p.merchant_uid)
  		)where merchant_uid = #{value} and rownum=1

  	</select>
  	
  	<select id="getAdminExticketDetail" resultType="Trillion.Palet.DTO.AdminDTO">
  		select et_booknumber as merchant_uid, et_username as name, et_email as email, et_phone as phone,
		et_title as title, et_place as place, et_paymethod as card_name, et_date as period, et_state as state,
		et_category as category, et_cost as price, et_buydate as pay_time, et_count as count, et_point as point,
		et_usedpoint as usedpoint, et_cpdiscount as cpdiscount, et_cpserial as cpserial from exticket where et_booknumber = #{value}
	</select>
	
	<select id="getAdminProticketDetail" resultType="Trillion.Palet.DTO.AdminDTO">
		select pro_booknumber as merchant_uid, pro_username as name, pro_email as email, pro_phone as phone,
		pro_title as title, pro_place as place, pro_paymethod as card_name, pro_date as period, pro_state as state,
		pro_category as category, pro_cost as price, pro_buydate as pay_time, pro_count as count, pro_point as point,
		pro_usedpoint as usedpoint, pro_cpdiscount as cpdiscount, pro_cpserial as cpserial from proticket where pro_booknumber = #{value}
	</select>
  	
  	<select id="cancelSelectByPage" resultType="Trillion.Palet.DTO.CancelDTO">
  		select * from (select row_number() over(order by cancel_seq desc) line, cancel.* from cancel) where line between #{start} and #{end}
  	</select>
  	
  	<select id="getCancelTotalCount" resultType="int">
  		select count(*) from cancel
  	</select>
  	
  	<!-- Cancel Logic -->
  	
  	<select id="categoryCheck" resultType="String">
  		select category from (select category, merchant_uid from mygoods 
  		UNION ALL select et_category as category, et_booknumber as merchant_uid from exticket
  		UNION ALL select pro_category as category, pro_booknumber as merchant_uid from proticket) 
  		where merchant_uid = #{value}
  	</select>
  	
  	<update id="cancelExticketUpdate">
  		update exticket set et_state = 'AC' where et_booknumber = #{value}
  	</update>
  	
  	<update id="cancelGoodsUpdate">
  		update mygoods set state = 'AC' where merchant_uid = #{value}
  	</update>
  	
  	<update id="cancelProticketUpdate">
  		update proticket set pro_state = 'AC' where pro_booknumber = #{value}
  	</update>  	
  	
  	<delete id="cancelPaymentCheckDelete">
  		delete from cancel where booknumber = #{value}
  	</delete>
  	
  	<update id='restoreExCountAndStock'>
  		update preexhibition set pe_salescount = pe_salescount - (select et_count from exticket where et_booknumber = #{value}) 
		where pe_seq = (select e_num from exticket where et_booknumber = #{value})
  	</update>
  	
  	<select id="checkUsedExPoint" resultType="int">
  		select et_usedpoint from exticket where et_booknumber = #{value}
  	</select>
  	
  	<update id='restoreExpoint'>
  		update member set point = point + (select et_usedpoint from exticket where et_booknumber = #{value) 
  		where email = (select et_email from exticket where et_booknumber = #{value})
  	</update>
  	
  	<update id='restoreGoodsCountAndStock'>
  		update goods set sales_count = sales_count-(select sales_count from mygoods 
		where merchant_uid=#{value}), g_stock = g_stock + (select sales_count from mygoods where merchant_uid=#{value})
		where g_num = (select g_num from mygoods where merchant_uid=#{value})
  	</update>
  	
  	<select id='checkUsedGoodsPoint' resultType='int'>
  		select usedpoint from mygoods where merchant_uid = #{value}
  	</select>
  	
  	<update id='restoreGoodsPoint'>
  		update member set point = point + (select usedpoint from mygoods where merchant_uid = #{value)
  		where email = (select email from mygoods where merchant_uid = #{value})
  	</update>
  	
  	<update id='restoreProCountAndStock'>
  		update program set sales_count = sales_count - (select pro_count from proticket where pro_booknumber = #{value}) 
		where p_num = (select p_num from proticket where pro_booknumber = #{value})
  	</update>
  	
  	<select id='checkUsedProPoint' resultType='int'>
  		select pro_usedpoint from proticket where pro_booknumber = #{value}
  	</select>
  	
  	<update id='restoreProPoint'>
  		update member set point = point + (select pro_usedpoint from proticket where pro_booknumber = #{value) 
  		where email = (select pro_email from proticket where pro_booknumber = #{value})
  	</update>
  	
  </mapper>