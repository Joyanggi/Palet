<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="MyPage">
<!-- 티켓 -->
	<select id="myTicket" resultType="Trillion.Palet.DTO.ExticketDTO">
		select * from exticket where et_email=#{value} and et_state ='BU'
	</select>
	<select id="myTicketcnt" resultType="int">
		select count(*) from exticket where et_email=#{value} and et_state in('BU','BC' )
	</select>
	<select id="premyTicket" resultType="Trillion.Palet.DTO.ExProticketDTO">
with total1 as
(select et_email as email, et_title as title, et_place as place, et_date as datee, et_booknumber as booknumber, et_state as state, et_buydate as buydate, et_category as category, et_username as pickdate, ep_sysname as sysname
from exticket left outer join exhibitionpic using(e_num) 
union all
select pro_email as email, pro_title as title, pro_place as place, pro_date as datee, pro_booknumber as booknumber, pro_state as state, pro_buydate as buydate, pro_category as category, pro_pickdate as pickdate, pp_sysname as sysname  
from proticket left outer join programpic using(p_num)),
total2 as (
select row_number () over(order by datee) line, booknumber,state, email, title, place, datee, buydate, category, pickdate, sysname from total1)
select line, booknumber, email, title, place, datee, buydate,state, category, pickdate, sysname from total2 where  line between #{limit} and #{limit}+9 and email =#{email} 
	</select>
	<select id="premyTicketcnt" resultType="int">
		select count(*) from (with total1 as
(select et_email as email, et_title as title, et_place as place, et_date as datee, et_booknumber as booknumber, et_state as state, et_buydate as buydate, et_category as category, et_username as pickdate, ep_sysname as sysname
from exticket left outer join exhibitionpic using(e_num) 
union all
select pro_email as email, pro_title as title, pro_place as place, pro_date as datee, pro_booknumber as booknumber, pro_state as state, pro_buydate as buydate, pro_category as category, pro_pickdate as pickdate, pp_sysname as sysname  
from proticket left outer join programpic using(p_num)),
total2 as (
select row_number () over(order by datee) line, booknumber, email, title,state, place, datee, buydate, category, pickdate, sysname from total1)
select line, booknumber, email, title, place, datee, buydate, category, pickdate,state, sysname from total2 where  email=#{value} and state = 'AU')
	</select>
	<select id="myTicketDetailview" resultType="Trillion.Palet.DTO.ExticketDTO">
		select * from exticket where et_booknumber = #{value}
	</select>
	<!-- 
	관리자에서 취소완료시 재고량 판매량 수정
	<update id="MinusSalesCnt">
		update exhibition set sales_count = sales_count-(select et_count from payment 
		where et_booknumber=#{booknumber}) where e_name = (select et_title from exticket where et_booknumber=#{booknumber})
	</update>
	
	<update id="MinusSalesCnt_G">
		update goods set sales_count = sales_count-(select g_count from payment 
		where merchant_uid=#{merchant_uid}), g_stock = g_stock + (select g_count from payment where merchant_uid=#{merchant_uid})
		where g_num = (select g_num from payment where merchant_uid=#{merchant_uid});
	</update> -->
	
<!-- 	cancel 테이블에 취소사유 넣기 -->
	<insert id="payCancel">
	 insert into cancel values(cancel_seq.nextval,#{content},#{category},#{booknumber},sysdate)
	</insert>
	
<!-- 취소해서 BC 상태로 변경 -->
	<update id="BeforeCancel">
		update 
		
		<if test='category=="E"'>
		exticket set et_state ='BC' where et_booknumber
		</if>
		<if test='category=="G"'>
		payment set state='BC' where merchant_uid
		</if>
		 =#{booknumber}
	</update>
	
<!-- 	취소리스트 -->
	<select id="CancelList" resultType="Trillion.Palet.DTO.CancelListDTO">
		select * from (
		select g_num as nums, email, g_name as title, totalprice, pay_time, state, category, g_option as options, merchant_uid as uids,
goodspic.gp_sysname as sysname from payment left outer join goodspic using(g_num) 
where state like '%C' 
UNION ALL
select e_num as nums, et_email as email, et_title as title, et_cost as totalprice, et_buydate as pay_time, et_state as state, 
et_category as category, et_username as options ,et_booknumber as uids, exhibitionpic.ep_sysname as sysname from exticket left outer join exhibitionpic using(e_num)
where et_state like '%C') where email = #{value} order by pay_time desc
		
	</select>
<!-- 	취소리스트 기간 ajax -->
	<select id="refundajax" resultType="Trillion.Palet.DTO.CancelListDTO">
	select * from (
		select g_num as nums, email, g_name as title, totalprice, pay_time, state, category, g_option as options, merchant_uid as uids,
goodspic.gp_sysname as sysname from payment left outer join goodspic using(g_num) 
where state like '%C' 
UNION ALL
select e_num as nums, et_email as email, et_title as title, et_cost as totalprice, et_buydate as pay_time, et_state as state, 
et_category as category, et_username as options ,et_booknumber as uids, exhibitionpic.ep_sysname as sysname from exticket left outer join exhibitionpic using(e_num)
where et_state like '%C') where email = #{email} 
	<if test='#{btn}=="week"'>
	where pay_time between add_months(sysdate,-1) and sysdate order by pay_time
	</if>	
		
	</select>


<!-- 	굿즈 -->
<!-- TO_CHAR(pay_time, 'YYYY-MM-DD HH24:MI:SS') AS pay_time jdbcType="TIMESTAMP"  javaType="java.util.Date -->
	<resultMap type="HashMap" id="selectMap">
		<result property="line" column="line"/>
		<result property="merchant_uid" column="merchant_uid"/>
		<result property="pay_time" column="pay_time"/>
		<result property="g_name" column="p.g_name"/>
		<result property="g_num" column="p.g_num"/>
		<result property="g_option" column="p.g_option"/>
		<result property="g_count" column="g_count"/>
		<result property="totalprice" column="totalprice"/>
		<result property="state" column="state"/>
		<result property="pe_name" column="pe_name"/>
		<result property="g_seq" column="g_seq"/>
		<result property="gp_sysname" column="gp_sysname"/>
	</resultMap>

	<select id="myShopping" parameterType="HashMap" resultType="HashMap" resultMap="selectMap">
		select * from (select row_number() over(order by merchant_uid) line, merchant_uid, 
		TO_CHAR(pay_time, 'YYYY-MM-DD HH24:MI:SS') AS pay_time, 
		p.g_name, p.g_num, p.g_option, g_count, totalprice, state, g_seq, pe_name, gp_sysname
		from payment p join goods g using (g_seq)
		join preexhibition e on (g.e_num = e.pe_seq)
		join goodspic gp on (g.g_num = gp.g_num)
		where email = #{email})where line between #{limit} and #{limit}+9
	</select>
	
	
	<select id="myShoppingDetailView" resultType="Trillion.Palet.DTO.PayDTO">
		select * from payment where merchant_uid = #{merchant_uid}
	</select>
	
	<resultMap type="HashMap" id="productMap">
		<result property="pe_name" column="pe_name"/>
		<result property="g_num" column="g.g_num"/>
		<result property="g_name" column="p.g_name"/>
		<result property="g_count" column="g_count"/>
		<result property="g_option" column="p.g_option"/>
		<result property="gp_sysname" column="gp_sysname"/>
		<result property="totalprice" column="totalprice"/>
		<result property="point" column="point"/>
		<result property="usedpoint" column="usedpoint"/>
		<result property="cpdiscount" column="cpdiscount"/>
		<result property="cpserial" column="cpserial"/>
		<result property="pe_img" column="pe_img"/>
	</resultMap>
	
	<select id="myShoppingProduct" parameterType="HashMap" resultType="HashMap" resultMap="productMap">
		select pe_name, g.g_num, p.g_name, g_count, p.g_option, gp_sysname, totalprice, point, usedpoint, cpdiscount, cpserial, pe_img              
		from goodspic gp join payment p using (g_num)
		join goods g on(g.g_seq = p.g_seq)
		join preexhibition e on (g.e_num = e.pe_seq)
		where merchant_uid=#{merchant_uid}
	</select>
	
	<select id="memberName" resultType="String">
		select name from member where email=#{email}
	</select>
	
	<update id="changeStateCU">
		update payment set state='CU' where merchant_uid=#{merchant_uid}
	</update>
	
	<update id="changeStateAU">
		update payment set state='AU' where merchant_uid=#{merchant_uid}
	</update>
	<select id="selectMyCoupon" resultType="Trillion.Palet.DTO.MypageUserDetailDTO">
		select category, dc from coupon where email = #{value} and used = 'N'
	</select>
	<select id="selectMyCouponStatus" resultType="Trillion.Palet.DTO.MypageUserDetailDTO">
		select category, dc from coupon where email = #{email} and used = #{used}
	</select>
	<select id="selectMyexhibition" resultType="Trillion.Palet.DTO.MypageUserDetailDTO">
		select * from (select row_number() over(order by et_buydate) line, et_title, et_date, et_buydate, exticket.e_num, exhibitionpic.ep_sysname, et_booknumber from exticket left outer join exhibitionpic on exticket.e_num = exhibitionpic.e_num where et_email = #{value} and ep_main = 'Y') where line between 1 and 3
	</select>
	<select id="selectMyGoods" resultType="Trillion.Palet.DTO.MypageUserDetailDTO">
		select * from (select row_number() over(order by pay_time) line, g_name, totalprice, pay_time from payment where email = #{value}) where line between 1 and 10
	</select>
	<update id="couponRegist">
		update coupon set email = #{email} where serial = #{serial}
	</update>
	
<!-- 	프로그램 -->
	<select id="ExProTicket" resultType="Trillion.Palet.DTO.ExProticketDTO">
	select * from (select et_email as email, et_title as title, et_place as place, et_date as datee, et_booknumber as booknumber, et_state as state, et_buydate as buydate, et_category as category, et_username as pickdate, ep_sysname as sysname
from exticket left outer join exhibitionpic using(e_num) 
union all
select pro_email as email, pro_title as title, pro_place as place, pro_date as datee, pro_booknumber as booknumber, pro_state as state, pro_buydate as buydate, pro_category as category, pro_pickdate as pickdate, pp_sysname as sysname  
from proticket left outer join programpic using(p_num)) where state = 'BU' and email = #{value} order by buydate desc
	</select>
</mapper>